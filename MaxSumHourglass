import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



public class Solution {
    static int row=6;
    static int column=6;
    
    static int findMaxSum(List<List<Integer>>deter) {
        
        if (row<3||column<3) {
            System.exit(0);
        }

        int maxSum=Integer.MIN_VALUE;

        for (int i=0;i<row-2;i++) {
            for (int j=0;j<column-2;j++) {
                int sum=(deter.get(i).get(j)+deter.get(i).get(j+1)+deter.get(i).get(j+2))+(deter.get(i+1).get(j+1))+(deter.get(i+2).get(j)+deter.get(i+2).get(j+1)+deter.get(i+2).get(j+2));
                maxSum=Math.max(maxSum,sum);
            }
        }
        return maxSum;

    }
    
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        List<List<Integer>> arr = new ArrayList<>();

        IntStream.range(0, 6).forEach(i -> {
            try {
                arr.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int result=findMaxSum(arr);
        System.out.println(result);
            bufferedReader.close();

           
    
    }}

